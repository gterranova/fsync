#!/usr/bin/env python
# -*- coding: iso-8859-1 -*-
# generated by wxGlade HG on Thu Mar 24 19:35:55 2011

import wx
import thread
import time
import exceptions

from fsync import FileSync
from changesdialog import ActionsDialog

try:
    import cPickle as pickle
except:
    import pickle

# begin wxGlade: extracode
# end wxGlade
from wx.lib.newevent import NewEvent

(RunEvent, EVT_RUN) = NewEvent()
(CancelEvent, EVT_CANCEL) = NewEvent()
(DoneEvent, EVT_DONE) = NewEvent()
(ProgressStartEvent, EVT_PROGRESS_START) = NewEvent()
(ProgressEvent, EVT_PROGRESS) = NewEvent()

class InterruptedException(exceptions.Exception):
    def __init__(self, args = None):
        self.args = args

class ThreadedJob:
    def __init__(self):
        # tell them ten seconds at first
        self.secondsRemaining = 10.0
        self.lastTick = 0

        # not running yet
        self.isPaused = False
        self.isRunning = False
        self.keepGoing = True

    def Start(self):
        self.keepGoing = self.isRunning = True
        thread.start_new_thread(self.Run, ())
        self.isPaused = False

    def Stop(self):
        self.keepGoing = False

    def WaitUntilStopped(self):
        while self.isRunning:
            time.sleep(0.1)
            wx.SafeYield()

    def IsRunning(self):
        return self.isRunning

    def Run(self):
        # this is overridden by the
        # concrete ThreadedJob
        print "Run was not overloaded"
        self.JobFinished()

    def Pause(self):
        self.isPaused = True

    def Continue(self):
        self.isPaused = False

    def PossibleStoppingPoint(self):
        if not self.keepGoing:
            raise InterruptedException("process interrupted.")
        wx.SafeYield()

        # allow cancel while paused
        while self.isPaused:
            if not self.keepGoing:
                raise InterruptedException("process interrupted.")

            # don't hog the CPU
            time.sleep(0.1)

    def SetProgressMessageWindow(self, win):
        self.win = win

    def JobBeginning(self, totalTicks):

        self.time0 = self.lastIterationTime = time.time()
        self.totalTicks = totalTicks

        if hasattr(self, "win") and self.win:
            wx.PostEvent(self.win, ProgressStartEvent(total=totalTicks))

    def JobProgress(self, currentTick):
        dt = time.time() - self.lastIterationTime
        self.lastIterationTime = time.time()
        dtick = currentTick - self.lastTick
        self.lastTick = currentTick

        alpha = 0.92
        if currentTick > 1:
            self.secondsPerTick = dt * (1.0 - alpha) + (self.secondsPerTick * alpha)
        else:
            self.secondsPerTick = dt

        if dtick > 0:
            self.secondsPerTick /= dtick

        self.secondsRemaining = self.secondsPerTick * (self.totalTicks - 1 - currentTick) + 1

        if hasattr(self, "win") and self.win:
            wx.PostEvent(self.win, ProgressEvent(count=currentTick))

    def SecondsRemaining(self):
        return self.secondsRemaining

    def TimeRemaining(self):

        if 1: #self.secondsRemaining > 3:
            minutes = self.secondsRemaining // 60
            seconds = int(self.secondsRemaining % 60.0)
            return "%i:%02i" % (minutes, seconds)
        else:
            return "a few"

    def JobFinished(self):
        if hasattr(self, "win") and self.win:
            wx.PostEvent(self.win, DoneEvent())

        # flag we're done before we post the all done message
        self.isRunning = False
       
class SyncJob(ThreadedJob):
    def __init__(self, fsync):
        self.fsync = fsync
        self.currentTick = 0
        self.labelText = ""
        ThreadedJob.__init__(self)

    def JobProgress(self, currentTick):
        currentTime = time.time()
        self.lastTick = currentTick
        
        if currentTime - self.lastIterationTime > 1:
            self.lastIterationTime = currentTime
            self.secondsRemaining = (self.lastIterationTime - self.time0) / self.lastTick * (self.totalTicks - self.lastTick)
        if hasattr(self, "win") and self.win:
            wx.PostEvent(self.win, ProgressEvent(count=currentTick))

    def _Run(self, *args):
        try:
            self.PossibleStoppingPoint()
        except InterruptedException:
            return False
        
        self.currentTick = self.currentTick + 1

        try:
            self.labelText = " ".join(args)
            self.JobProgress(self.currentTick)
            self.PossibleStoppingPoint()
        except InterruptedException:
            # clean up if user stops the Job early
            print "canceled prematurely!"
            return False
        
        return True
       
    def Run(self):
        """This runs in a different thread.  Sleep is used to simulate a long running task."""
        self.JobBeginning(len(self.fsync.actions))
        self.fsync.sync(callback=self._Run)
        self.JobFinished()

    def __str__(self):
        """ The job progress dialog expects the job to describe its current state."""
        response = [self.labelText]
        if self.isPaused:
            response.append("Paused Counting")
        elif not self.isRunning:
            response.append("Will Count the seconds")
        else:
            pass
#            response.append("Counting")

        return " ".join(response)

    
class JobProgress(wx.Dialog):
    """ This dialog shows the progress of any ThreadedJob.

    It can be shown Modally if the main application needs to suspend
    operation, or it can be shown Modelessly for background progress
    reporting.

    app = wx.PySimpleApp()
    job = EggTimerJob(duration = 10)
    dlg = JobProgress(None, job)
    job.SetProgressMessageWindow(dlg)
    job.Start()
    dlg.ShowModal()


    """
    def __init__(self, parent, job):
        self.job = job

        wx.Dialog.__init__(self, parent, -1, "Progress", size=(350,200))

        # vertical box sizer
        sizeAll = wx.BoxSizer(wx.VERTICAL)

        # Job status text
        self.JobStatusText = wx.StaticText(self, -1, "Starting...")
        sizeAll.Add(self.JobStatusText, 0, wx.EXPAND|wx.ALL, 8)

        # wxGague
        self.ProgressBar = wx.Gauge(self, -1, 10, wx.DefaultPosition, (250, 25))
        sizeAll.Add(self.ProgressBar, 0, wx.EXPAND|wx.ALL, 8)

        # horiz box sizer, and spacer to right-justify
        sizeRemaining = wx.BoxSizer(wx.HORIZONTAL)
        sizeRemaining.Add((2,2), 1, wx.EXPAND)

        # time remaining read-only edit
        # putting wide default text gets a reasonable initial layout.
        self.remainingText = wx.StaticText(self, -1, "???:??")
        sizeRemaining.Add(self.remainingText, 0, wx.LEFT|wx.RIGHT|wx.ALIGN_CENTER_VERTICAL, 8)

        # static text: remaining
        self.remainingLabel = wx.StaticText(self, -1, "remaining")
        sizeRemaining.Add(self.remainingLabel, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 8)

        # add that row to the mix
        sizeAll.Add(sizeRemaining, 1, wx.EXPAND)

        # horiz box sizer & spacer
        sizeButtons = wx.BoxSizer(wx.HORIZONTAL)
        sizeButtons.Add((2,2), 1, wx.EXPAND|wx.ADJUST_MINSIZE)

        # Pause Button
        self.PauseButton = wx.Button(self, -1, "Pause")
        sizeButtons.Add(self.PauseButton, 0, wx.ALL, 4)
        self.Bind(wx.EVT_BUTTON, self.OnPauseButton, self.PauseButton)

        # Cancel button
        self.CancelButton = wx.Button(self, wx.ID_CANCEL, "Cancel")
        sizeButtons.Add(self.CancelButton, 0, wx.ALL, 4)
        self.Bind(wx.EVT_BUTTON, self.OnCancel, self.CancelButton)

        # Add all the buttons on the bottom row to the dialog
        sizeAll.Add(sizeButtons, 0, wx.EXPAND|wx.ALL, 4)

        self.SetSizer(sizeAll)
        #sizeAll.Fit(self)
        sizeAll.SetSizeHints(self)

        # jobs tell us how they are doing
        self.Bind(EVT_PROGRESS_START, self.OnProgressStart)
        self.Bind(EVT_PROGRESS, self.OnProgress)
        self.Bind(EVT_DONE, self.OnDone)

        self.Layout()

    def OnPauseButton(self, event):
        if self.job.isPaused:
            self.job.Continue()
            self.PauseButton.SetLabel("Pause")
            self.Layout()
        else:
            self.job.Pause()
            self.PauseButton.SetLabel("Resume")
            self.Layout()

    def OnCancel(self, event):
        self.job.Stop()

    def OnProgressStart(self, event):
        self.ProgressBar.SetRange(event.total)
        self.statusUpdateTime = time.clock()

    def OnProgress(self, event):
        # update the progress bar
        self.ProgressBar.SetValue(event.count)

        self.remainingText.SetLabel(self.job.TimeRemaining())

        # update the text a max of 20 times a second
        if time.clock() - self.statusUpdateTime > 0.05:
            self.JobStatusText.SetLabel(str(self.job))
            self.statusUpdateTime = time.clock()
            self.Layout()

    # when a job is done
    def OnDone(self, event):
        self.ProgressBar.SetValue(0)
        self.JobStatusText.SetLabel("Finished")
        self.Destroy()

class FsyncDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: FsyncDialog.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE|wx.RESIZE_BORDER|wx.THICK_FRAME
        wx.Dialog.__init__(self, *args, **kwds)
        self.panel_1 = wx.Panel(self, -1)
        self.combo_box_1 = wx.ComboBox(self.panel_1, -1, choices=[], style=wx.CB_DROPDOWN)
        self.sizer_4_staticbox = wx.StaticBox(self.panel_1, -1, _("Source"))
        self.text_ctrl_1 = wx.TextCtrl(self.panel_1, -1, "")
        self.sizer_5_staticbox = wx.StaticBox(self.panel_1, -1, _("Destination"))
        self.button_1 = wx.Button(self, wx.ID_OK, "")
        self.button_2 = wx.Button(self, wx.ID_CANCEL, "")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.OnOK, self.button_1)
        # end wxGlade
        try:
            f = open("fsync.dat", "r")
            self.items = pickle.load(f)
            f.close()
        except:
            self.items = {}
            
        for k,v in self.items.items():
            self.combo_box_1.Append(k, v)
            
        self.Bind(wx.EVT_COMBOBOX, self.OnComboText)
        self.progress = None

    def __set_properties(self):
        # begin wxGlade: FsyncDialog.__set_properties
        self.SetTitle(_("fsync"))
        self.SetSize((400,160))
        self.panel_1.SetMinSize((400, 160))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: FsyncDialog.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3 = wx.BoxSizer(wx.VERTICAL)
        self.sizer_5_staticbox.Lower()
        sizer_5 = wx.StaticBoxSizer(self.sizer_5_staticbox, wx.HORIZONTAL)
        self.sizer_4_staticbox.Lower()
        sizer_4 = wx.StaticBoxSizer(self.sizer_4_staticbox, wx.HORIZONTAL)
        sizer_4.Add(self.combo_box_1, 1, wx.ALL|wx.EXPAND, 0)
        sizer_3.Add(sizer_4, 0, wx.ALL|wx.EXPAND, 0)
        sizer_5.Add(self.text_ctrl_1, 1, wx.ALL, 0)
        sizer_3.Add(sizer_5, 0, wx.ALL|wx.EXPAND, 0)
        self.panel_1.SetSizer(sizer_3)
        sizer_1.Add(self.panel_1, 1, wx.EXPAND|wx.FIXED_MINSIZE, 0)
        sizer_2.Add(self.button_1, 0, 0, 0)
        sizer_2.Add(self.button_2, 0, wx.LEFT, 10)
        sizer_1.Add(sizer_2, 0, wx.ALL|wx.ALIGN_RIGHT, 5)
        self.SetSizer(sizer_1)
        self.Layout()
        self.Centre()
        # end wxGlade

    def OnComboText(self, event): # wxGlade: FsyncDialog.<event_handler>
        for k,v in self.items.items():
            if k == self.combo_box_1.GetValue():
                self.text_ctrl_1.SetValue(v)
                break

    def OnOK(self, event): # wxGlade: FsyncDialog.<event_handler>
        src = self.combo_box_1.GetValue()
        dst = self.text_ctrl_1.GetValue()
        fsync = FileSync(src, dst)
        fsync.compare()
        dlg = ActionsDialog(None, -1, "Changes", fsync.actions)
        dlg.ShowModal()
        fsync.actions = dlg.actions        
        dlg.Destroy()

        self.items[src] = dst
        f = open("fsync.dat", "w")
        f.write(pickle.dumps(self.items))
        f.close()
        job = SyncJob(fsync)
        dlg = JobProgress(self, job)
        job.SetProgressMessageWindow(dlg)
        job.Start()
        dlg.ShowModal()
        fsync.close()
# end of class FsyncDialog


if __name__ == "__main__":
    import gettext
    gettext.install("app") # replace with the appropriate catalog name

    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    app.MainLoop()
    fsync_dialog = FsyncDialog(None, -1, "")
    app.SetTopWindow(fsync_dialog)
    fsync_dialog.ShowModal()
    fsync_dialog.Destroy()
